/*
* file generated by genDisassembler.py, DO NOT EDIT,
* changes will be overwritten on compile time
*/
#ifndef SRC_DISASSEMBLER_H
#define SRC_DISASSEMBLER_H
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>

namespace tools{
class Disassembler {
private:
    static int disassemble_(std::string &buffer, int pc)
    {
		int tmp = pc;
		int tmp2 = pc + 1;
		int tmp3 = pc + 2;
		int tmp4 = pc + 3;
		int tmp5 = pc + 4;
		int tmp6 = pc + 5;
		
		unsigned int x;   
    	std::stringstream ss;
    	ss << std::hex << buffer[tmp] << buffer[tmp2];
   		ss >> x;
		ss.clear();

        int count;
		//std::cout << "\npc:  "<< pc;
		//std::cout << "\nstr: "<< ss.str();
		//std::cout << "\nhex: " << x;

		switch (x) {
		case 0x00: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "BRK" << std::endl; break;
		case 0x01: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ORA ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0x05: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ORA $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x06: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ASL $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x08: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "PHP" << std::endl; break;
		case 0x09: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ORA #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x0a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "ASL A" << std::endl; break;
		case 0x0d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ORA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x0e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ASL $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x10: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BPL ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x11: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ORA ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0x15: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ORA ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x16: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ASL ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x18: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "CLC" << std::endl; break;
		case 0x19: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ORA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0x1d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ORA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x1e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ASL $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x20: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   JSR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x21: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       AND ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0x24: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BIT $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x25: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       AND $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x26: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ROL $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x28: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "PLP" << std::endl; break;
		case 0x29: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       AND #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x2a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "ROL A" << std::endl; break;
		case 0x2c: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   BIT $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x2d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   AND $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x2e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ROL $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x30: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BMI ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x31: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       AND ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0x35: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       AND ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x36: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ROL ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x38: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "SEC" << std::endl; break;
		case 0x39: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   AND $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0x3d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   AND $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x3e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ROL $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x40: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "RTI" << std::endl; break;
		case 0x41: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       EOR ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0x45: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       EOR $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x46: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LSR $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x48: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "PHA" << std::endl; break;
		case 0x49: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       EOR #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x4a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "LSR A" << std::endl; break;
		case 0x4c: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   JMP $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x4d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   EOR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x4e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LSR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x50: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BVC ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x51: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       EOR ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0x55: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       EOR ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x56: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LSR ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x58: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "CLI" << std::endl; break;
		case 0x59: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   EOR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0x5d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   EOR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x5e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LSR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x60: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "RTS" << std::endl; break;
		case 0x61: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ADC ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0x65: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ADC $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x66: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ROR $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x68: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "PLA" << std::endl; break;
		case 0x69: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ADC #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x6a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "ROR A" << std::endl; break;
		case 0x6c: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   JMP ($"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ")" << std::endl; count = 6; break;
		case 0x6d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ADC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x6e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ROR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x70: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BVS ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x71: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ADC ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0x75: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ADC ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x76: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       ROR ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x78: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "SEI" << std::endl; break;
		case 0x79: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ADC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0x7d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ADC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0x7e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   ROR $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x81: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STA ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0x84: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STY $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x85: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STA $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x86: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STX $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x88: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "DEY" << std::endl; break;
		case 0x8a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TXA" << std::endl; break;
		case 0x8c: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   STY $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x8d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   STA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x8e: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   STX $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0x90: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BCC ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0x91: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STA ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0x94: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STY ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x95: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STA ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0x96: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       STX ($" << buffer[tmp3] << buffer[tmp4] << ",Y" << std::endl; count = 4; break;
		case 0x98: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TYA" << std::endl; break;
		case 0x99: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   STA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0x9a: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TXS" << std::endl; break;
		case 0x9d: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   STA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xa0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDY #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xa1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDA ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0xa2: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDX #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xa4: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDY $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xa5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDA $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xa6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDX $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xa8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TAY" << std::endl; break;
		case 0xa9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDA #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xaa: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TAX" << std::endl; break;
		case 0xac: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDY $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xad: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xae: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDX $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xb0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BCS ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xb1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDA ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0xb4: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDY ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xb5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDA ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xb6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       LDX ($" << buffer[tmp3] << buffer[tmp4] << ",Y" << std::endl; count = 4; break;
		case 0xb8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "CLV" << std::endl; break;
		case 0xb9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0xba: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "TSX" << std::endl; break;
		case 0xbc: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDY $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xbd: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDA $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xbe: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   LDX $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0xc0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CPY #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xc1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CMP ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0xc4: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CPY $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xc5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CMP $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xc6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       DEC $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xc8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "INY" << std::endl; break;
		case 0xc9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CMP #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xca: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "DEX" << std::endl; break;
		case 0xcc: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   CPY $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xcd: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   CMP $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xce: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   DEC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xd0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BNE ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xd1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CMP ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0xd5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CMP ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xd6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       DEC ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xd8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "CLD" << std::endl; break;
		case 0xd9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   CMP $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0xdd: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   CMP $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xde: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   DEC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xe0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CPX #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xe1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       SBC ($" << buffer[tmp3] << buffer[tmp4] << ",X)" << std::endl; count = 4; break;
		case 0xe4: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       CPX $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xe5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       SBC $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xe6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       INC $" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xe8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "INX" << std::endl; break;
		case 0xe9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       SBC #$" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xea: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "NOP" << std::endl; break;
		case 0xec: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   CPX $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xed: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   SBC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xee: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   INC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << std::endl; count = 6; break;
		case 0xf0: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       BEQ ($" << buffer[tmp3] << buffer[tmp4] << std::endl; count = 4; break;
		case 0xf1: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       SBC ($" << buffer[tmp3] << buffer[tmp4] << "),Y" << std::endl; count = 4; break;
		case 0xf5: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       SBC ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xf6: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp3] << buffer[tmp4] << "       INC ($" << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 4; break;
		case 0xf8: std::cout << buffer[tmp] << buffer[tmp2] << "           " << "SED" << std::endl; break;
		case 0xf9: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   SBC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",Y"  << std::endl; count = 6; break;
		case 0xfd: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   SBC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;
		case 0xfe: std::cout << buffer[tmp] << buffer[tmp2] << "  " << buffer[tmp5] << buffer[tmp6]  << "  " << buffer[tmp3] << buffer[tmp4] << "   INC $"  << buffer[tmp5] << buffer[tmp6] << buffer[tmp3] << buffer[tmp4] << ",X" << std::endl; count = 6; break;

        default:
            std::cout << "???" << std::endl;;
			break;
        }
        return count;
    }

public:    
    int disassemble(std::string filename)
    {
        std::string buffer;

		std::ifstream in(filename);
 
		// If we couldn't open the output file stream for reading
		if (!in) {
			std::cerr << filename << " could not be opened for reading!" << std::endl;
			return 1;
		}
		
		while (in){ // While there's still stuff left to read
			in >> buffer;
		}
		in.close();

        unsigned pc = 0;
		//std::cout << "buffer: " << buffer << "\n";
        std::cout << "  Hexdump    Disassembly" << "\n";
		std::cout << "------------------------" << "\n";
		while (pc < buffer.size()) {
            pc += disassemble_(buffer, pc);
        }
		return 0;
    }
};
} //namespace tools
#endif //SRC_DISASSEMBLER_H

